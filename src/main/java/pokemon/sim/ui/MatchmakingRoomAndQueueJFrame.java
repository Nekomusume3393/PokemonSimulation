/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pokemon.sim.ui;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import pokemon.sim.entity.User;
import pokemon.sim.util.XAuth;
import pokemon.sim.util.XDate;
import pokemon.sim.util.XImage;
import pokemon.sim.util.XSocketUIImpl;

/**
 *
 * @author May5th
 */
public class MatchmakingRoomAndQueueJFrame extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MatchmakingRoomAndQueueJFrame.class.getName());
    
    private XSocketUIImpl socket;
    private String opponentUsername;
    private String[] myTeam;
    private String[] opponentTeam;
    private boolean inBattle = false;

    /**
     * Creates new form MatchmakingRoomAndQueueJFrame
     */
    public MatchmakingRoomAndQueueJFrame() {
        initComponents();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                btnExitActionPerformed(null); // Reuse the exit logic
            }
        });

        setupSelfInfo();
        setupSocketConnection();
        disableMatchButtons();
        setLocationRelativeTo(null);
        setResizable(false);
        setupChatbox();
        lblDisplayName2.setText("");
        lblUsername2.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        pnlChatbox = new javax.swing.JPanel();
        pnlTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        scrollPanel = new javax.swing.JScrollPane();
        txtChatbox = new javax.swing.JTextArea();
        lblMatchmaking = new javax.swing.JLabel();
        pnlPlayer1 = new javax.swing.JPanel();
        lblProfilePic1 = new javax.swing.JLabel();
        pnlPlayer2 = new javax.swing.JPanel();
        lblProfilePic2 = new javax.swing.JLabel();
        btnAccept = new javax.swing.JButton();
        btnDecline = new javax.swing.JButton();
        lblDisplayName1 = new javax.swing.JLabel();
        lblUsername1 = new javax.swing.JLabel();
        lblDisplayName2 = new javax.swing.JLabel();
        lblUsername2 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        btnList = new javax.swing.JButton();
        lblAcceptWarn = new javax.swing.JLabel();
        lblDeclineWarn = new javax.swing.JLabel();
        lblFindingPlayer = new javax.swing.JLabel();
        lblInQueue = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();
        lblPlayerOne = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlChatbox.setBackground(new java.awt.Color(213, 183, 139));

        pnlTitle.setBackground(new java.awt.Color(199, 165, 117));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 102, 102));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("CHATBOX");

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        txtMessage.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtMessage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(185, 149, 102), 3));
        txtMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMessageActionPerformed(evt);
            }
        });
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessageKeyPressed(evt);
            }
        });

        btnSend.setBackground(new java.awt.Color(199, 165, 117));
        btnSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokemon/sim/image/send-icon.png"))); // NOI18N
        btnSend.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(185, 149, 102), 3));
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        txtChatbox.setColumns(20);
        txtChatbox.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtChatbox.setRows(5);
        scrollPanel.setViewportView(txtChatbox);

        javax.swing.GroupLayout pnlChatboxLayout = new javax.swing.GroupLayout(pnlChatbox);
        pnlChatbox.setLayout(pnlChatboxLayout);
        pnlChatboxLayout.setHorizontalGroup(
            pnlChatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChatboxLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlChatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlChatboxLayout.createSequentialGroup()
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        pnlChatboxLayout.setVerticalGroup(
            pnlChatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChatboxLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlChatboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        panel.add(pnlChatbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 20, 600, 860));

        lblMatchmaking.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblMatchmaking.setForeground(new java.awt.Color(255, 255, 0));
        lblMatchmaking.setText("MATCHMAKING ROOM");
        panel.add(lblMatchmaking, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 720, 50));

        pnlPlayer1.setBackground(new java.awt.Color(255, 255, 255));
        pnlPlayer1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 5, true));

        lblProfilePic1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblProfilePic1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProfilePic1.setText("Player1.png");

        javax.swing.GroupLayout pnlPlayer1Layout = new javax.swing.GroupLayout(pnlPlayer1);
        pnlPlayer1.setLayout(pnlPlayer1Layout);
        pnlPlayer1Layout.setHorizontalGroup(
            pnlPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblProfilePic1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        pnlPlayer1Layout.setVerticalGroup(
            pnlPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblProfilePic1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );

        panel.add(pnlPlayer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 180, 170));

        pnlPlayer2.setBackground(new java.awt.Color(255, 255, 255));
        pnlPlayer2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 5, true));

        lblProfilePic2.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblProfilePic2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProfilePic2.setText("Player2.png");

        javax.swing.GroupLayout pnlPlayer2Layout = new javax.swing.GroupLayout(pnlPlayer2);
        pnlPlayer2.setLayout(pnlPlayer2Layout);
        pnlPlayer2Layout.setHorizontalGroup(
            pnlPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblProfilePic2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        pnlPlayer2Layout.setVerticalGroup(
            pnlPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblProfilePic2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );

        panel.add(pnlPlayer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 460, 180, 170));

        btnAccept.setBackground(new java.awt.Color(0, 204, 255));
        btnAccept.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnAccept.setForeground(new java.awt.Color(255, 255, 255));
        btnAccept.setText("ACCEPT");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        panel.add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 780, 370, 90));

        btnDecline.setBackground(new java.awt.Color(255, 51, 0));
        btnDecline.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        btnDecline.setForeground(new java.awt.Color(255, 255, 255));
        btnDecline.setText("DECLINE");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });
        panel.add(btnDecline, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 780, 370, 90));

        lblDisplayName1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblDisplayName1.setForeground(new java.awt.Color(255, 255, 0));
        lblDisplayName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDisplayName1.setText("(PLAYER 1 - DISPLAY NAME)");
        panel.add(lblDisplayName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 310, 520, 40));

        lblUsername1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblUsername1.setForeground(new java.awt.Color(255, 255, 0));
        lblUsername1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername1.setText("(PLAYER 1 - USERNAME)");
        panel.add(lblUsername1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 350, 180, 20));

        lblDisplayName2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblDisplayName2.setForeground(new java.awt.Color(255, 255, 0));
        lblDisplayName2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDisplayName2.setText("(PLAYER 2 - DISPLAY NAME)");
        panel.add(lblDisplayName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 640, 520, 40));

        lblUsername2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblUsername2.setForeground(new java.awt.Color(255, 255, 0));
        lblUsername2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername2.setText("(PLAYER 2 - USERNAME)");
        panel.add(lblUsername2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 680, 180, -1));

        btnExit.setBackground(new java.awt.Color(255, 0, 0));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokemon/sim/image/exit-icon.png"))); // NOI18N
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panel.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 150, 110, 110));

        btnList.setBackground(new java.awt.Color(51, 255, 0));
        btnList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokemon/sim/image/list-icon.png"))); // NOI18N
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });
        panel.add(btnList, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 20, 110, 110));

        lblAcceptWarn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAcceptWarn.setForeground(new java.awt.Color(255, 255, 0));
        lblAcceptWarn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAcceptWarn.setText("In queue, cannot accept.");
        panel.add(lblAcceptWarn, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 750, 370, -1));

        lblDeclineWarn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblDeclineWarn.setForeground(new java.awt.Color(255, 255, 0));
        lblDeclineWarn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDeclineWarn.setText("In queue, cannot decline.");
        panel.add(lblDeclineWarn, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 750, 370, -1));

        lblFindingPlayer.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblFindingPlayer.setForeground(new java.awt.Color(255, 255, 0));
        lblFindingPlayer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFindingPlayer.setText("FINDING PLAYER...");
        panel.add(lblFindingPlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 430, 180, -1));

        lblInQueue.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblInQueue.setForeground(new java.awt.Color(255, 255, 0));
        lblInQueue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInQueue.setText("IN QUEUE...");
        panel.add(lblInQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 180, -1));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pokemon/sim/image/16-9-background.png"))); // NOI18N
        panel.add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1600, 900));

        lblPlayerOne.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblPlayerOne.setForeground(new java.awt.Color(255, 255, 0));
        lblPlayerOne.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayerOne.setText("(PLAYER 1 - DISPLAY NAME)");
        panel.add(lblPlayerOne, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 310, 520, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        // TODO add your handling code here:
        socket.sendFromUI("REQUEST_QUEUE_LIST");
    }//GEN-LAST:event_btnListActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        btnExit.setEnabled(false);

        new Thread(() -> {
            try {
                if (socket != null) {
                    socket.stopListening();
                    socket.sendFromUI("EXIT|" + XAuth.user.getUsername());
                    Thread.sleep(100);
                    socket.close();
                }
            } catch (Exception e) {
                logger.warning("Error while exiting: " + e.getMessage());
            } finally {
                SwingUtilities.invokeLater(() -> {
                    dispose();
                    System.exit(0);
                });
            }
        }).start();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        socket.sendFromUI("ACCEPT|" + XAuth.user.getUsername());
        btnAccept.setEnabled(false);
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        // TODO add your handling code here:
        socket.sendFromUI("DECLINE|" + XAuth.user.getUsername());
        resetPlayer2();
    }//GEN-LAST:event_btnDeclineActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        sendMessage();
    }//GEN-LAST:event_btnSendActionPerformed

    private void txtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessageKeyPressed

    private void txtMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMessageActionPerformed
        // TODO add your handling code here:
        sendMessage();
    }//GEN-LAST:event_txtMessageActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void setupSelfInfo() {
        User user = XAuth.user;
        lblDisplayName1.setText(user.getDisplayName());
        lblUsername1.setText(user.getUsername());
        // lblProfilePic1.setIcon(new ImageIcon(XImage.resize(XImage.get(user.getImage()), 170, 160)));
    }

    private void setupChatbox() {
        // Make sure the text area is properly configured
        txtChatbox.setEditable(false); // Users shouldn't edit the chat history
        txtChatbox.setLineWrap(true);
        txtChatbox.setWrapStyleWord(true);
        txtChatbox.setCaretPosition(0);

        // Add a test message to verify the chatbox works
        txtChatbox.append("=== Chat initialized ===\n");
    }

    private String[] parseServerMessage(String message) {
        if (message == null) {
            return new String[]{""};
        }

        String[] parts = message.split("\\|", -1); // -1 to preserve empty strings
        for (int i = 0; i < parts.length; i++) {
            parts[i] = parts[i].trim(); // Remove leading/trailing spaces
            // Additional cleanup for any hidden characters
            parts[i] = parts[i].replaceAll("^\\s+|\\s+$", ""); // Remove all leading/trailing whitespace
        }

        // Debug output
        System.out.println("DEBUG: Parsed message parts: " + Arrays.toString(parts));

        return parts;
    }

    private void setupSocketConnection() {
        try {
            System.out.println("DEBUG: Attempting to connect to server...");
            socket = new XSocketUIImpl("localhost", 9999);
            System.out.println("DEBUG: Connected to server successfully");

            // Set up the message handler with debugging
            socket.listen(message -> {
                System.out.println("DEBUG: Socket received: '" + message + "'");
                handleServerMessage(message);
            });
            System.out.println("DEBUG: Listener started");

            // Send JOIN_QUEUE message with all user info
            User user = XAuth.user;
            String joinMessage = "JOIN_QUEUE|" + user.getUsername() + "|" + user.getDisplayName() + "|" + user.getImage();
            System.out.println("DEBUG: Sending JOIN_QUEUE message: '" + joinMessage + "'");
            socket.sendFromUI(joinMessage);

        } catch (IOException e) {
            System.err.println("ERROR: Unable to connect to server: " + e.getMessage());
            e.printStackTrace();

            JOptionPane.showMessageDialog(this,
                    "Unable to connect to server!\nPlease make sure the server is running.",
                    "Connection Error",
                    JOptionPane.ERROR_MESSAGE);

            SwingUtilities.invokeLater(() -> {
                dispose();
                System.exit(1);
            });
        }
    }

    private void disableMatchButtons() {
        btnAccept.setEnabled(false);
        btnDecline.setEnabled(false);
        lblAcceptWarn.setVisible(true);
        lblDeclineWarn.setVisible(true);
    }

    private void handleServerMessage(String message) {
        System.out.println("DEBUG: Matchmaking received message: '" + message + "'");

        if (message == null || message.trim().isEmpty()) {
            return;
        }

        // Don't process any messages if we're in battle
        if (inBattle) {
            System.out.println("DEBUG: In battle, ignoring message in matchmaking frame");
            return;
        }

        try {
            // FIXED: Better message parsing
            String[] parts = parseServerMessage(message);
            String command = parts[0];

            if ("MATCH_FOUND".equals(command)) {
                if (parts.length >= 4) {
                    String username2 = parts[1];
                    String displayName2 = parts[2];
                    String image2 = parts[3];
                    
                    opponentUsername = username2;

                    // FIXED: Debug output to see exactly what we received
                    System.out.println("DEBUG: MATCH_FOUND parsed - Username: '" + username2 + "', DisplayName: '" + displayName2 + "'");

                    SwingUtilities.invokeLater(() -> {
                        lblUsername2.setText(username2);
                        lblDisplayName2.setText(displayName2);

                        lblFindingPlayer.setVisible(false);
                        btnAccept.setEnabled(true);
                        btnDecline.setEnabled(true);
                        lblAcceptWarn.setVisible(false);
                        lblDeclineWarn.setVisible(false);
                    });
                }
            } else if ("CHAT".equals(command)) {
                String content = message.substring(5); // Remove "CHAT|" prefix
                System.out.println("DEBUG: Chat content received: '" + content + "'");

                SwingUtilities.invokeLater(() -> {
                    try {
                        txtChatbox.append(content + "\n");
                        txtChatbox.setCaretPosition(txtChatbox.getDocument().getLength());
                        System.out.println("DEBUG: Added to chatbox: '" + content + "'");
                    } catch (Exception e) {
                        System.err.println("ERROR adding to chatbox: " + e.getMessage());
                        e.printStackTrace();
                    }
                });
            } else if ("OPPONENT_LEFT".equals(message)) {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, "Opponent has left. Returning to queue.");
                    socket.sendFromUI("REQUEUE|" + XAuth.user.getUsername());
                    resetPlayer2();
                });
            } else if ("SELECT_TEAM".equals(command)) {
                // Both players accepted - open team selection dialog
                SwingUtilities.invokeLater(() -> {
                    NewChoosingPokemonJDialog dialog = new NewChoosingPokemonJDialog(this, true);
                    dialog.setVisible(true);
                    
                    // Check if user selected a team
                    if (dialog.hasValidTeam()) {
                        myTeam = dialog.getSelectedPokemon();
                        
                        // Send team to server
                        StringBuilder teamMsg = new StringBuilder("TEAM_SELECTED|" + XAuth.user.getUsername());
                        for (String pokemon : myTeam) {
                            if (pokemon != null) {
                                teamMsg.append("|").append(pokemon);
                            }
                        }
                        socket.sendFromUI(teamMsg.toString());
                        
                        // Show waiting message
                        JOptionPane.showMessageDialog(this, 
                            "Team confirmed! Waiting for opponent to select their team...",
                            "Team Selection",
                            JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        // User cancelled - decline the match
                        socket.sendFromUI("DECLINE|" + XAuth.user.getUsername());
                        resetPlayer2();
                    }
                });
            } else if ("WAITING_FOR_OPPONENT".equals(command)) {
                // Do nothing - already showing waiting message
            } else if ("OPPONENT_TEAM_CONFIRMED".equals(command)) {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, 
                        "Opponent has confirmed their team!",
                        "Team Selection",
                        JOptionPane.INFORMATION_MESSAGE);
                });
            } else if ("START_DUEL".equals(command)) {
                // Parse the full duel data
                String myUsernameFromServer = parts[1];
                String opponentUsernameFromServer = parts[2];
                
                System.out.println("DEBUG: START_DUEL - myUsername: " + myUsernameFromServer + ", opponentUsername: " + opponentUsernameFromServer);
                
                // Parse teams
                String[] myTeamFromServer = null;
                String[] opponentTeamFromServer = null;
                
                int idx = 3;
                while (idx < parts.length) {
                    if ("YOUR_TEAM".equals(parts[idx]) && idx + 1 < parts.length) {
                        myTeamFromServer = parts[idx + 1].split(",");
                        idx += 2;
                    } else if ("OPPONENT_TEAM".equals(parts[idx]) && idx + 1 < parts.length) {
                        opponentTeamFromServer = parts[idx + 1].split(",");
                        idx += 2;
                    } else {
                        idx++;
                    }
                }
                
                final String[] finalMyTeam = myTeamFromServer;
                final String[] finalOpponentTeam = opponentTeamFromServer;
                final String finalMyUsername = myUsernameFromServer;
                final String finalOpponentUsername = opponentUsernameFromServer;
                
                SwingUtilities.invokeLater(() -> {
                    // Set battle flag to prevent message processing here
                    inBattle = true;
                    
                    System.out.println("DEBUG: Creating battle frame with myUsername: " + finalMyUsername + ", opponentUsername: " + finalOpponentUsername);
                    
                    // Create and show the multiplayer battle frame
                    MultiplayerPokeDuelJFrame duelFrame = new MultiplayerPokeDuelJFrame(
                        socket, 
                        finalMyUsername, 
                        finalOpponentUsername,
                        finalMyTeam, 
                        finalOpponentTeam
                    );
                    duelFrame.setVisible(true);
                    this.dispose();
                });
            } else if ("QUEUE_LIST".equals(command)) {
                StringBuilder list = new StringBuilder("Current Queue:\n");

                for (int i = 1; i < parts.length; i += 2) {
                    if (i + 1 < parts.length) {
                        String username = parts[i];
                        String displayName = parts[i + 1];
                        list.append(displayName).append(" (").append(username).append(")\n");
                    }
                }
                final String queueList = list.toString();
                SwingUtilities.invokeLater(()
                        -> JOptionPane.showMessageDialog(this, queueList)
                );
            }
        } catch (Exception e) {
            System.err.println("ERROR handling server message: " + message + " - " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void resetPlayer2() {
        lblUsername2.setText("");
        lblDisplayName2.setText("");
        // lblProfilePic2.setIcon(null);
        lblFindingPlayer.setVisible(true);
        disableMatchButtons();
        opponentUsername = null;
    }

    private void sendMessage() {
        String msg = txtMessage.getText().trim();
        if (!msg.isEmpty()) {
            String formatted = XAuth.user.getDisplayName() + " [" + XDate.format(LocalDateTime.now()) + "]: " + msg;
            System.out.println("DEBUG: Sending message: '" + formatted + "'");

            // Display the message locally first (since server won't echo it back to sender)
            txtChatbox.append(formatted + "\n");
            txtChatbox.setCaretPosition(txtChatbox.getDocument().getLength());

            // Send to server for broadcasting to others
            socket.sendFromUI("CHAT|" + formatted);
            txtMessage.setText("");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MatchmakingRoomAndQueueJFrame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnDecline;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnList;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel lblAcceptWarn;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblDeclineWarn;
    private javax.swing.JLabel lblDisplayName1;
    private javax.swing.JLabel lblDisplayName2;
    private javax.swing.JLabel lblFindingPlayer;
    private javax.swing.JLabel lblInQueue;
    private javax.swing.JLabel lblMatchmaking;
    private javax.swing.JLabel lblPlayerOne;
    private javax.swing.JLabel lblProfilePic1;
    private javax.swing.JLabel lblProfilePic2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername1;
    private javax.swing.JLabel lblUsername2;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel pnlChatbox;
    private javax.swing.JPanel pnlPlayer1;
    private javax.swing.JPanel pnlPlayer2;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTextArea txtChatbox;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
